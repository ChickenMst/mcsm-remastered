#!/bin/sh
self=$0
cmd=$1;	shift
cd=$(pwd)

conffile=/usr/local/etc/mcsm.conf
if [ ! -f "$conffile" ]
then
	conffile=/etc/mcsm.conf
	if [ ! -f "$conffile" ]
	then
		echo "config file nothing."
		echo "/usr/local/etc/mcsm.conf or /etc/mcsm.conf"
		exit 1
	fi
fi

eval `cat $conffile`

# IN ) mcsm_func_isalive servername
# OUT) "" OR "PID"
mcsm_func_isalive () {
	local	servername=$1
	local	PID=$(/usr/local/bin/tmux list-panes -a -F "#{session_name} #{pane_pid}" | grep minecraft-${servername} | sed -r "s/^[^0-9]*([0-9]+).*$/\1/")
	echo $PID
}


mcsm_func_validate_servername () {
	local	servername=$1
	if [ "$servername" == "" ]
	then
		echo "servername nothing." 1>&2
		exit 1
	fi
	local	serverdir=$serversdir/$servername
	if [ ! -d $serverdir ]
	then
		echo "${servername} is nothing. please create ${servername}." 1>&2
		exit 1
	fi

	echo $serverdir
}


mcsm_func_server_args () {
	if [ $# == 0 ]
	then
		local	ret=""
		local	dirs=$(ls -d $serversdir/*)
		for file in $dirs
		do
			if [ -f "$file/eula.txt" ]
			then
				ret="$ret $(basename $file)"
			fi
		done
		echo $ret
	else
		echo $*
	fi
} 


mcsm_cmd_create () {
	servername=$1
	if [ "$servername" == "" ]
	then
		echo "$cmd SERVERNAME"
		exit	1
	fi

	serverdir=$serversdir/$servername
	echo "Create server dir '$serverdir'."
	mkdir -p $serverdir
	echo "eula=true" >  $serverdir/eula.txt

	echo $serverdir/mcsm.conf
	cat <<- EOT > $serverdir/mcsm.conf
		#${servername}_mem_min=1024M
		#${servername}_mem_max=8192M
	EOT

	ver=$2
	if [ "$ver" == "" ]
	then
		exit	0
	fi
	
	worked=`mcsm_cmd_update $servername $ver`

	exit	0
}

mcsm_cmd_delete () {
	servername=$1
	if [ "$servername" == "" ]
	then
		echo "$cmd SERVERNAME"
		exit 1
	fi

	PID=`mcsm_func_isalive $servername`
	if [ "$PID" != "" ]
	then
		echo "Server $servername is running"
		exit 1
	fi

	SERVERDIR=`mcsm_func_validate_servername $servername`
	if [ "$?" != "0" ]; then exit 1; fi
	
	cd "${SERVERDIR}/.."

	rm -rf $servername

	exit	0
}

mcsm_cmd_start () {
	servername=$1
	if [ "$servername" == "" ]
	then
		echo "$cmd SERVERNAME"
	fi

	PID=`mcsm_func_isalive $servername`
	if [ "$PID" != "" ]
	then
		echo "Server $servername is already running"
		exit 1
	fi

	SERVERDIR=`mcsm_func_validate_servername $servername`
	if [ "$?" != "0" ]; then exit 1; fi

	if [ -f "$SERVERDIR/mcsm.conf" ]
	then
		eval `cat $SERVERDIR/mcsm.conf`
	fi
	echo "Starting $servername."

	eval "local mem_min=\${${servername}_mem_min}"
	eval "local mem_max=\${${servername}_mem_max}"
	eval : \${mem_min:="1024M"}
	eval : \${mem_max:="4096M"}

	eval `cat $SERVERDIR/ver.conf`
	eval "local serverjarver=\${ver}"

	serverjarname="${serverjarver}.jar"

	jar="${SERVERDIR}/versions/${serverjarver}/${serverjarname}"
	cd "${SERVERDIR}"
	/usr/local/bin/tmux new -d -s "minecraft-${servername}" "/usr/local/bin/java -Xms${mem_min} -Xmx${mem_max} -jar ${jar}; tmux kill-session -t minecraft-${servername}"
	exit 0
}

mcsm_cmd_start_all () {
	SERVERS=`mcsm_func_server_args $*`
	if [ "$?" != "0" ]; then exit 1; fi
	if [ "$SERVERS" = "" ]
	then
		echo "server data nothing in '$serversdir'." 1>&2
		exit 1
	fi
	for servername in $SERVERS
	do
		PID=`mcsm_func_isalive $servername`
		if [ "$PID" != "" ]
		then
			exit	1
		fi

		SERVERDIR=`mcsm_func_validate_servername $servername`
		if [ "$?" != "0" ]; then exit 1; fi

		if [ -f "$SERVERDIR/mcsm.conf" ]
		then
			eval `cat $SERVERDIR/mcsm.conf`
		fi

		echo "Starting $servername."

		eval "local mem_min=\${${servername}_mem_min}"
		eval "local mem_max=\${${servername}_mem_max}"
		eval : \${mem_min:="1024M"}
		eval : \${mem_max:="4096M"}

		eval `cat $SERVERDIR/ver.conf`
		eval "local serverjarver=\${ver}"

		serverjarname="${serverjarver}.jar"

		jar="${SERVERDIR}/versions/${serverjarver}/${serverjarname}"

		cd "${SERVERDIR}"
		/usr/local/bin/tmux new -d -s "minecraft-${servername}" "/usr/local/bin/java -Xms${mem_min} -Xmx${mem_max} -jar ${jar}; tmux kill-session -t minecraft-${servername}"

	done
	exit 0
}


mcsm_cmd_stop () {
	servername=$1
	if [ "$servername" == "" ]
	then
		echo "$cmd SERVERNAME"
		exit 1
	fi
	serverdir=`mcsm_func_validate_servername $servername`
	if [ "$?" != "0" ]; then exit 1; fi

	PID=`mcsm_func_isalive $servername`
	if [ "$PID" != "" ]
	then
		echo "Stopping '$servername' please wait for about 30 seconds."
		/usr/local/bin/tmux send-keys -t minecraft-${servername} stop C-m
		while ps -p $PID > /dev/null
		do
			/bin/sleep 1
		done
	fi
	exit 0	
}

mcsm_cmd_stop_all () {
	SERVERS=`mcsm_func_server_args $*`
	if [ "$?" != "0" ]; then exit 1; fi
	if [ "$SERVERS" = "" ]
	then
		echo "server data nothing in '$serversdir'." 1>&2
		exit 1
	fi

	for servername in $SERVERS
	do
		PID=`mcsm_func_isalive $servername`
		if [ "$PID" != "" ]
		then
			echo "Stopping '$servername' please wait for about 30 seconds."
			/usr/local/bin/tmux send-keys -t minecraft-${servername} stop C-m
			while ps -p $PID > /dev/null
			do
				/bin/sleep 1
			done
		fi
	done
	exit	0
}


mcsm_cmd_restart () {
	servername=$1
	if [ "$servername" == "" ]
	then
		echo "$cmd SERVERNAME"
		exit 1
	fi
	
	serverdir=`mcsm_func_validate_servername $servername`
	if [ "$?" != "0" ]; then exit 1; fi

	echo "Restarting ${servername}."

	stopworked=`mcsm_cmd_stop $servername`
	if [ "$?" != "0" ]
	then
		echo "Failed to stop ${servername}."
		exit 1
	fi

	startworked=`mcsm_cmd_start $servername`
	if [ "$?" != "0" ]
	then
		echo "Failed to start ${servername}."
		exit 1
	fi

	exit 0
}

mcsm_cmd_status () {
	SERVERS=`mcsm_func_server_args $*`
	if [ "$?" != "0" ]; then exit 1; fi
	if [ "$SERVERS" = "" ]
	then
		echo "server data nothing in '$serversdir'." 1>&2
		exit 1
	fi

	printf "%6s  %s\\n" "PID" "Servername"
	for servername in $SERVERS
	do
		serverdir=`mcsm_func_validate_servername $servername`
		if [ "$?" != "0" ]; then exit 1; fi

		PID=`mcsm_func_isalive $servername`
		if [ "$?" != "0" ]; then exit 1; fi

		if [ "$PID" == "" ]
		then
			printf "%6s  %s\\n" "---" "$servername"
		else
			printf "%6d  %s\\n" "$PID" "$servername"
		fi
	done

	exit	0
}

mcsm_cmd_console () {
	servername=$1
	if [ "$servername" == "" ]
	then
		echo "$cmd SERVERNAME"
		exit 1
	fi
	PID=`mcsm_func_isalive $servername`
	if [ "$PID" == "" ]
	then
		echo "$servername is not active"
		exit	1
	fi
	tmux attach -t "minecraft-${servername}"


	exit	0
}

mcsm_cmd_update () {
	servername=$1
	ver=$2

	if [ "$servername" == "" ]
	then
		echo "$cmd SERVERNAME VERSION"
		echo "example) $cmd SERVERNAME 1.19"
		exit 1
	fi

	if [ "$ver" == "" ]
	then
		echo "$cmd SERVERNAME VERSION"
		echo "example) $cmd $servername 1.19"
		exit 1
	fi
	
	serverdir=`mcsm_func_validate_servername $servername`
	if [ "$?" != "0" ]; then exit 1; fi

	mkdir -p "${serverdir}/versions"

	versions=`curl https://qing762.is-a.dev/api/papermc | jq -c`
	echo "$versions" > ${serverdir}/versions/temp.json

	if [ "$ver" == "latest" ]
	then
		latestver=`cat ${serverdir}/versions/temp.json | jq '.latest' | sed 's/"//g'`
	
		selectedver=$latestver
	else
		selectedver=$ver
	fi

	echo "$selectedver"

	mkdir -p "${serverdir}/versions/${selectedver}"
	cd "${serverdir}/versions/${selectedver}"

	verurl=`cat ${serverdir}/versions/temp.json | jq --arg key "$selectedver" '.versions.[$key]' | sed 's/"//g'`

	echo "$verurl"

	curl $verurl -o "${selectedver}.jar"

	echo "ver=$selectedver" > ${serverdir}/ver.conf

	exit	0
}

if [ "$cmd" == "create" ]
then
	mcsm_cmd_create $*
fi

if [ "$cmd" == "delete" ]
then
	mcsm_cmd_delete $*
fi

if [ "$cmd" == "update" ]
then
	mcsm_cmd_update $*
fi

if [ "$cmd" == "start" ]
then
	if [ "$1" == "all" ]
	then
		mcsm_cmd_start_all
	else
		mcsm_cmd_start $*
	fi
fi

if [ "$cmd" == "stop" ]
then
	if [ "$1" == "all" ]
	then
		mcsm_cmd_stop_all
	else
		mcsm_cmd_stop $*
	fi
fi

if [ "$cmd" == "restart" ]
then
	mcsm_cmd_restart $*
fi

if [ "$cmd" == "status" ]
then
	mcsm_cmd_status $*
fi

if [ "$cmd" == "console" ]
then
	mcsm_cmd_console $*
fi

echo "Unkown command $cmd."
exit	1

